--> ssh -i ~/.ssh/gcp_vm juvill015@34.42.41.66
--> ssh -i GCP/gcp_vm juvill015@34.42.41.66


gcp connection command 
    --> ssh -i gcp_vm juvill015@34.42.41.66

gcp server project path
    --> cd /home/juvill015/juvill

command to transfer all the files to the server
    --> scp -i GCP/gcp_vm -r * juvill015@34.42.41.66:/home/juvill015/juvill

command to run the app on gunicorn
    --> gunicorn --bind 0.0.0.0:5000 wsgi:app

========================================================================================
DB setting of .env file

DB_HOST=localhost
DB_PORT=3306
DB_NAME=jewelry
DB_USER=juvill015
DB_PASSWORD=Aru.8967


================== juvill.service file for gunicorn arrengment ==========================

[Unit]
Description=Gunicorn instance to serve myflaskapp
After=network.target

[Service]
User=juvill015
Group=www-data
WorkingDirectory=/home/juvill015/juvill/
Environment="PATH=/home/juvill015/venv/bin/"

ExecStart=/home/juvill015/venv/bin/gunicorn --workers 3 --bind unix:juvill.sock -m 007 wsig:app

[Install]
WantedBy=multi-user.target

==================================================================================================================

================== Nginx configuration ============================================

server {
    listen 80;
    server_name 34.42.41.66;

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/juvill015/juvill/juvill.sock;
    }
}



===============================================================================================================Your Setup Overview:
Project Setup Overview:

    1). Flask (Backend - Application Layer): Handles business logic, user authentication, and database interactions.
    2). HTML/CSS/JS (Frontend - Client Layer): Displays the UI and interacts with the backend.
    3). Gunicorn (Application Server): Runs Flask and manages multiple worker processes.
    4). NGINX (Web Server & Reverse Proxy): Handles incoming requests, serves static content, and forwards dynamic requests to Gunicorn.
        1. What is NGINX Doing in Your Setup?

* NGINX in your setup is acting as a web server and reverse proxy:
‚úÖ Web Server Role:

* Serves static content like images, CSS, and JavaScript files.
Manages incoming HTTP requests efficiently.
‚úÖ Reverse Proxy Role:

1. Forwards dynamic requests (like user login, adding/deleting jewelry) to Gunicorn.
    Handles SSL (if configured) and load balancing if multiple Gunicorn instances are used.
    Protects your backend by preventing direct access to Gunicorn.
    üëâ Without NGINX, users would directly access Gunicorn, which is not optimized for handling static files or handling traffic efficiently.

2. What is Gunicorn Doing in Your Setup?
    Gunicorn (Green Unicorn) is an application server that runs your Flask application:
    ‚úÖ Application Server Role:

    Runs multiple worker processes, allowing Flask to handle multiple requests simultaneously.
    Acts as a bridge between Flask and NGINX.
    Improves performance compared to Flask‚Äôs built-in development server.
    üëâ Without Gunicorn, Flask‚Äôs default server (Werkzeug) would struggle to handle multiple users efficiently.

3. Which Web Server and Application Server Are You Using?
    Component	Server Type	Your Setup
    Web Server	NGINX	‚úÖ Used for serving static files & reverse proxy
    Application Server	Gunicorn	‚úÖ Used to run Flask efficiently

4. How Your Setup Works (Step-by-Step)
    1Ô∏è‚É£ User visits your website (e.g., example.com)
    2Ô∏è‚É£ NGINX receives the request (acting as a web server)
    3Ô∏è‚É£ NGINX checks if it's a static file (CSS, JS, images)

==== If static, NGINX serves it directly. ====

If dynamic (e.g., login, inventory update), NGINX forwards it to Gunicorn.
    4Ô∏è‚É£ Gunicorn processes the request using Flask (fetching data, handling logic).
    5Ô∏è‚É£ Gunicorn sends the response back to NGINX.
    6Ô∏è‚É£ NGINX delivers the final response to the user‚Äôs browser.


5. Why Is This Setup Good?
    ‚úÖ Better Performance: Gunicorn enables Flask to handle multiple users efficiently.
    ‚úÖ Security: NGINX prevents users from directly accessing Gunicorn.
    ‚úÖ Scalability: You can easily add more Gunicorn workers or backend servers.
    ‚úÖ Efficiency: NGINX efficiently handles static content and proxies requests.